        -:    0:Source:C:/Users/maria/Desktop/Taller/Algoritmos I/TPImplementacion/ejercicios.cpp
        -:    0:Graph:C:\Users\maria\Desktop\Taller\Algoritmos I\TPImplementacion\cmake-build-debug\CMakeFiles\juegoDeLaVida.dir\ejercicios.gcno
        -:    0:Data:C:\Users\maria\Desktop\Taller\Algoritmos I\TPImplementacion\cmake-build-debug\CMakeFiles\juegoDeLaVida.dir\ejercicios.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <algorithm>
        -:    2:#include "ejercicios.h"
        -:    3:#include "auxiliares.h"
        -:    4:
        -:    5:
        -:    6:// EJERCICIO 01
        5:    7:bool toroideValido(vector<vector<bool>> const &t) {
        5:    7-block  0
        5:    8:    int largoCol = t.size();
        5:    8-block  0
        5:    9:    bool res = true;
        -:   10:
        5:   11:    if ( filas(t) < 3 || columnas(t) < 3 ) return false;
        3:   11-block  0
        3:   11-block  1
        2:   11-block  2
        5:   11-block  3
        3:   11-block  4
        -:   12:
        7:   13:    for(int i =0 ; i < largoCol-1 ; i++){
        2:   13-block  0
        7:   13-block  1
        5:   13-block  2
        5:   14:        res = res && (t[i].size() == t[i+1].size());
        5:   14-block  0
        3:   14-block  1
        2:   14-block  2
        3:   14-block  3
        -:   15:    }
        -:   16:
        2:   17:    return res;
        2:   17-block  0
        -:   18:}
        -:   19:
        -:   20:
        -:   21:// EJERCICIO 02
        3:   22:vector<posicion> posicionesVivas(toroide const &t) {
        3:   22-block  0
        3:   23:    vector<posicion> vivos {};
        3:   23-block  0
        -:   24:
       20:   25:    for(int i = 0 ; i < t.size() ; i++){
       20:   25-block  0
       17:   25-block  1
       73:   26:        for(int j = 0 ; j < t[i].size() ; j++){
       17:   26-block  0
       73:   26-block  1
       56:   26-block  2
       56:   27:            if( t[i][j] ) vivos.push_back(mp(i, j));
       56:   27-block  0
       26:   27-block  1
       26:   27-block  2
       26:   27-block  3
    %%%%%:   27-block  4
    %%%%%:   27-block  5
        -:   28:        }
        -:   29:    }
        -:   30:
        3:   31:    return vivos;
        3:   31-block  0
        3:   31-block  1
        -:   32:}
        -:   33:
        -:   34:
        -:   35:// EJERCICIO 03
        4:   36:float densidadPoblacion(toroide const &t) {
        4:   36-block  0
        4:   37:    return 1.0 * cantidadVivas(t) / (filas(t) * columnas(t));
        4:   37-block  0
        -:   38:}
        -:   39:
        -:   40:
        -:   41:// EJERCICIO 04
     2719:   42:bool evolucionDePosicion(toroide const &t, posicion x) {
     2719:   42-block  0
        -:   43:
     2719:   44:    if (cantVecinosVivos(t, x) == 3) return true;
     2719:   44-block  0
      477:   44-block  1
     2242:   45:    if (cantVecinosVivos(t, x) == 2 && estaVivo(t, x) ) return true;
     2242:   45-block  0
      516:   45-block  1
      128:   45-block  2
     2114:   45-block  3
     2242:   45-block  4
      128:   45-block  5
        -:   46:
     2114:   47:    return false;
     2114:   47-block  0
        -:   48:}
        -:   49:
        -:   50:
        -:   51:// EJERCICIO 05
      110:   52:void evolucionToroide(toroide &t){
      110:   52-block  0
      110:   53:    int largoCol = t.size(), largoFil = t[0].size();
      110:   53-block  0
      220:   54:    toroide t0 = t;
      110:   54-block  0
    %%%%%:   54-block  1
        -:   55:
      562:   56:    for(int i = 0 ; i < largoCol ; i++) {
      110:   56-block  0
      562:   56-block  1
      452:   56-block  2
     3166:   57:        for(int j = 0 ; j < largoFil ; j++) {
      452:   57-block  0
     3166:   57-block  1
     2714:   58:            t[i][j] = evolucionDePosicion(t0, mp(i, j) );
     2714:   58-block  0
     2714:   58-block  1
     2714:   58-block  2
        -:   59:        }
        -:   60:    }
      110:   61:}
        -:   62:
        -:   63:
        -:   64:// EJERCICIO 06
      105:   65:toroide evolucionMultiple(toroide const &t, int n) {
      105:   65-block  0
      105:   66:    toroide out = t;
      105:   66-block  0
        -:   67:
      213:   68:    for( int i = 0 ; i < n ; i++) evolucionToroide(out);
      213:   68-block  0
      108:   68-block  1
      108:   68-block  2
        -:   69:
      105:   70:    return out;
      105:   70-block  0
      105:   70-block  1
    %%%%%:   70-block  2
        -:   71:}
        -:   72:
        -:   73:
        -:   74:// EJERCICIO 07
       17:   75:bool esPeriodico(toroide const &t, int &p) {
       17:   75-block  0
       17:   76:    p = 1;
       34:   77:    toroide t1 = evolucionMultiple(t, 1);
       17:   77-block  0
       17:   77-block  1
    %%%%%:   77-block  2
        -:   78:
       51:   79:    while( !sonIguales(t, t1) && toroideVivo(t1)){
       51:   79-block  0
       51:   79-block  1
       45:   79-block  2
       45:   79-block  3
       34:   79-block  4
       17:   79-block  5
       51:   79-block  6
       34:   80:        t1 = evolucionMultiple(t1, 1);
       34:   80-block  0
       34:   80-block  1
       34:   81:        p++;
        -:   82:    }
        -:   83:
       34:   84:    return sonIguales(t, t1);
       17:   84-block  0
       17:   84-block  1
        -:   85:}
        -:   86:
        -:   87:
        -:   88:// EJERCICIO 08
        8:   89:bool primosLejanos(toroide const &t, toroide const &u) {
        8:   89-block  0
       16:   90:    toroide t1 = t, u1 = u;
        8:   90-block  0
        8:   90-block  1
        8:   90-block  2
        8:   90-block  3
    %%%%%:   90-block  4
    %%%%%:   90-block  5
        -:   91:    int ticksT, ticksU;
        -:   92:
        8:   93:    if (esPeriodico(u, ticksU)){
        8:   93-block  0
        8:   93-block  1
        9:   94:        for( int i = 0 ; !sonIguales(t, u1) && toroideVivo(u1) && i <= ticksU+1 ; i++){
        3:   94-block  0
        9:   94-block  1
        9:   94-block  2
        7:   94-block  3
        7:   94-block  4
        7:   94-block  5
        6:   94-block  6
        3:   94-block  7
        9:   94-block  8
        3:   94-block  9
        6:   95:            u1 = evolucionMultiple(u1, 1);
        6:   95-block  0
        6:   95-block  1
        -:   96:        }
        -:   97:    } else {
       23:   98:        while( !sonIguales(t, u1) && toroideVivo(u1)){
       23:   98-block  0
       23:   98-block  1
       22:   98-block  2
       22:   98-block  3
       18:   98-block  4
        5:   98-block  5
       23:   98-block  6
       18:   99:            u1 = evolucionMultiple(u1, 1);
       18:   99-block  0
       18:   99-block  1
        -:  100:        }
        -:  101:    }
        8:  102:    if( sonIguales(t, u1) ) return true;
        8:  102-block  0
        8:  102-block  1
        3:  102-block  2
        -:  103:
        5:  104:    if (esPeriodico(t, ticksT)){
        5:  104-block  0
        5:  104-block  1
        5:  105:        for( int i = 0 ; !sonIguales(u, t1) && toroideVivo(t1) && i <= ticksT+1 ; i++){
        1:  105-block  0
        5:  105-block  1
        5:  105-block  2
        5:  105-block  3
        5:  105-block  4
        5:  105-block  5
        4:  105-block  6
        1:  105-block  7
        5:  105-block  8
        1:  105-block  9
        4:  106:            t1 = evolucionMultiple(t1, 1);
        4:  106-block  0
        4:  106-block  1
        -:  107:        }
        -:  108:    } else {
       20:  109:        while( !sonIguales(u, t1) && toroideVivo(t1)){
       20:  109-block  0
       20:  109-block  1
       19:  109-block  2
       19:  109-block  3
       16:  109-block  4
        4:  109-block  5
       20:  109-block  6
       16:  110:            t1 = evolucionMultiple(t1, 1);
       16:  110-block  0
       16:  110-block  1
        -:  111:        }
        -:  112:    }
        5:  113:    return sonIguales(u, t1);
        5:  113-block  0
        5:  113-block  1
        -:  114:}
        -:  115:
        -:  116:
        -:  117:// EJERCICIO 09
        2:  118:int seleccionNatural(vector <toroide> const &ts) {
        2:  118-block  0
        -:  119:
        4:  120:    vector<int> avisosFunebres = cuantoTardanEnMorirCadaUno(ts);
        2:  120-block  0
    %%%%%:  120-block  1
        -:  121:
        4:  122:    return indiceDelMayor(avisosFunebres);
        2:  122-block  0
        2:  122-block  1
        2:  122-block  2
        2:  122-block  3
    %%%%%:  122-block  4
        -:  123:}
        -:  124:
        -:  125:
        -:  126:// EJERCICIO 10
        3:  127:toroide fusionar(toroide const &t, toroide const &u) {
        3:  127-block  0
        3:  128:    if( columnas(t) != columnas(u) || filas(t) != filas(u) ) return {{}};
        3:  128-block  0
        3:  128-block  1
        3:  128-block  2
        3:  128-block  3
        3:  128-block  4
        3:  128-block  5
    $$$$$:  128-block  6
        3:  128-block  7
        3:  128-block  8
    $$$$$:  128-block  9
    $$$$$:  128-block 10
    $$$$$:  128-block 11
    $$$$$:  128-block 12
    $$$$$:  128-block 13
    %%%%%:  128-block 14
    %%%%%:  128-block 15
    %%%%%:  128-block 16
    %%%%%:  128-block 17
    %%%%%:  128-block 18
        -:  129:
        6:  130:    toroide out = t;
        3:  130-block  0
        3:  130-block  1
        3:  130-block  2
        -:  131:
       15:  132:    for(int i = 0 ; i < t.size() ; i++) {
        3:  132-block  0
       15:  132-block  1
       12:  132-block  2
       74:  133:        for(int j = 0 ; j < t[i].size() ; j++) {
       12:  133-block  0
       74:  133-block  1
       62:  133-block  2
       62:  134:            if(t[i][j] != u[i][j]) out[i][j] = false;
       62:  134-block  0
       34:  134-block  1
        -:  135:        }
        -:  136:    }
        3:  137:    return out;
        3:  137-block  0
        -:  138:}
        -:  139:
        -:  140:
        -:  141:// EJERCICIO 11
        5:  142:bool vistaTrasladada(toroide const &t, toroide const &u){
        5:  142-block  0
        5:  143:    if( columnas(t) != columnas(u) || filas(t) != filas(u) ) return false;
        5:  143-block  0
        4:  143-block  1
        1:  143-block  2
        4:  143-block  3
        5:  143-block  4
        1:  143-block  5
        4:  144:    int largoCol = t.size(), largoFil = t[0].size();
        4:  144-block  0
        -:  145:
        4:  146:    bool res = false;
        -:  147:
       17:  148:    for(int i = 0 ; i < largoCol ; i++) {
       17:  148-block  0
       13:  148-block  1
       56:  149:        for(int j = 0 ; j < largoFil ; j++) {
       13:  149-block  0
       56:  149-block  1
       43:  150:            res |= sonIguales(t, trasladar(u,i, j));
       43:  150-block  0
       43:  150-block  1
    %%%%%:  150-block  2
        -:  151:        }
        -:  152:    }
        5:  153:    return res;
        4:  153-block  0
        5:  153-block  1
        -:  154:}
        -:  155:
        -:  156:
        -:  157:// EJERCICIO 12
        6:  158:int menorSuperficieViva(toroide const &t){
        6:  158-block  0
        6:  159:    if( !toroideVivo(t) ) return 0;
        6:  159-block  0
        1:  159-block  1
        5:  160:    int largoCol = t.size(), largoFil = t[0].size();
        5:  160-block  0
        -:  161:
        5:  162:	int res = buscarRectanguloMasChico(t), candidato;
        -:  163:
       30:  164:    for(int i = 0 ; i < largoCol ; i++) {
       30:  164-block  0
       25:  164-block  1
      142:  165:        for(int j = 0 ; j < largoFil ; j++) {
       25:  165-block  0
      142:  165-block  1
      117:  165-block  2
      117:  166:            candidato = buscarRectanguloMasChico(trasladar(t,i, j));
      117:  166-block  0
      117:  166-block  1
    %%%%%:  166-block  2
      117:  167:            if(candidato < res) res = candidato;
        3:  167-block  0
        -:  168:        }
        -:  169:    }
        6:  170:	return res;
        5:  170-block  0
        6:  170-block  1
        -:  171:}
